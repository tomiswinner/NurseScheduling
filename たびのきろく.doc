urlの設定をいじる(=view関数で返すものを決める)

include
http://127.0.0.1:8000/に来たリクエストは、blog.urlsへリダイレクトされるようになる

htmlをおけるようにしました。（ローカル）
これをgitに引っ張る

ローカルでサーバーを立てた際には、
問題なくhtmlが表示されている。

なので、問題は、pythonanywhereへの落とし込みであると思う。
=>allowed host に追加されてなかったので追加。

それでも解決せず。。。

windows の \ これの問題でした。。。。

お次はクエリセット
これはただのモデルを管理するための配列クラス。なんてことはない

テンプレートは、自分で作成するのか。
ちなみにテンプレートはpythonの言語をHTMLにするためのもの見たいな感じか。
用意されたものではなく、こんな感じで表示してっていうページのテンプレートを自分で用意してそれをあてはめる感じなのね。
django テンプレートで変数を表示するには、変数の名前を{{}}でくくるらしい

__（アンダーバー２つ）で結ぶとORM構文詳しくは不明だけど


html内にdjango構文で書いてますが、for文に使用しているクエリセットが空のせいでできてない。
=>モデルに対してしか作用しないので、
bashではバックスラッシュ(\)が見た目のみ改行となるので、
これでfor文を実行して、publish(publishは自分で定義したコマンドなので注意)


staticファイルの取り扱いについて学んでいく（ｃｓｓ）
ただ、ローカル（開発環境）とサーバ（デプロイ）では仕様が異なるっぽい
とりあえずローカルではできたが、デプロイはまだできず。
そのうちチュートリアルで触ると思うので、進めていこう

もうわけわかめすぎるから、一度

最初からやってみようか；

=>なんかわからんけどできた
ちがいとしてはMEDIA_ROOTとかがあった？
よくわからず


pythonのチュートリアルやってみよー



includeはこのリクエストがきたら、ここのurlsに送れよってことかな？



urlConfなどがわかった。urlとviewの橋渡し

pathこれよくわかんねえなあ。polls.urls.pyにpath追加してっけど何かいてるのか不明。
=>つながった。pathは http://~~じゃんご~~/で、一番大元のurl.pyがうけて、そこから~~/polls/~~なら、pollsのurl.pyに/polls/~~以下をhttpReqにいれてとばす。
polls/urls.py がHttpReqを受けて、polls/以下のurlをhttpReqで受け取り、どのviewを起動するかを判断するため、urlpatternsを参照し、viewを起動するんや


テンプレートはhtmlをdjangoのデータベースを使用かつ、pythonでかけるようアレンジを加えたものみたいな認識
コンテクストは変数を変数の値をマッピングするものらしい。。。ってのは、変数をテンプレート言語にて{{}}こうやって書くけど、そこに対応した変数の値を関連付ける必要がある。そのためにコンテクストってのが必用なのかな？と理解しとく
テンプレート変数名をpythonオブジェクトにマッピングする辞書。。らしい

atest_question_list = Question.objects.order_by('-pub_date')[:5]
これの[:5]はなによ？？

renderはなんなん？？
djangoのテンプレート内で変数を利用するために、変数を確保するための辞書型配列。辞書なのでキーと値で保管される。
キーの値がそのまま変数名となる。
renderでは、テンプレート、コンテクスト、リクエストを引数として受け取ってそれを統合したレスポンスを返すイメージ

こっから先だるそうだし、とりあえずいらんやろ
実際に作ってみよう。まずはpythonへデータを突っ込めるようにせないかん。


let'S try

class based viewにできて出力も確認できたので、次
post method もok


感動！！！受け取ったデータを整形できた！！！
はっぴーうれぴーよろぴくね！！！


selfがよくわからんよね

pythonanywhere上にも展開完了
cssは機能してないが(これdebug=trueのままだからかな？)
postメソッドなどは機能しているので、ok

pathとしてはschedulingにとばすことはできているので、schedulingのほうのurls.pyだけいじって飛ばすようにしたらええんやね

postメソッドを使って、htmlのフォームを使って受け付けた入力を別ページにて展開もできた。しかもローカル環境ではなくサーバにて！
=>html からhtmlはカンペキだわ。

=>次はpythonファイルを起動してみようか？（もじゅーるとして）
つまり、html=> python => htmlですね
ちゃうわこれ、そもそもviews.pyがうけて、そこからpyファイルなんだから、views.pyにpython関数なりなんなりをインポートして使ったらええだけやん

自分で作成したシフト.py ファイルをimportできた。
（ちなみにfrom . をつけるとだめだった。これは1フロア cdしてるからかな？）
そして、出力も完了しました。次は、実際にファイルを出力してみる？
あるいは、エクセルファイルをだせるかやってみる？